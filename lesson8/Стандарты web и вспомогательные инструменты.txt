Стандарты web
и вспомогательные инструменты
Загрузка проектов на сервер. Проблема «кроссбраузерности». Стандарты HTML/CSS. Будущее за стандартами HTML5 и CSS3. Грамотная, универсальная верстка. Знакомство с препроцессорами на примере LESS.
Инструменты разработчика
Ftp-клиент
Плагины
Валидатор
Оптимизация изображений
Генератор CSS-градиентов
Совместимости разных версий браузеров
Проблема «кроссбраузерности»
Условный комментарий
Стандарты HTML/CSS
Версии HTML
Версии CSS
Будущее за стандартами HTML5 и CSS3
Семантические элементы
Сокращенная форма атрибутов в разделе head
Атрибуты формы
Canvas
Что нам дарит CSS3
Тени вокруг блоков и текста
Несколько фоновых изображений
Прозрачность
Препроцессоры
Что такое препроцессоры
LESS
Переменные
Операции
Цветовые операции
Примеси (mixins)
Заключение
Практика
Применение препроцессора LESS
Практическое задание
Дополнительные материалы
Используемая литература
























Инструменты разработчика
Какие инструменты могут понадобиться веб-разработчику:
* ftp-клиент (FileZilla, WinSCP, Total Commander . . .).
* Плагины (FireBug, WebDeveloper).
* Валидатор (http://validator.w3.org/).
* Оптимизация изображений (TinyPNG).
* Генератор CSS-градиентов (CSS3Factory, CSSMatic Gradients).
* Совместимости разных версий браузеров (Can I Use …?).
* Тестер для IE (IETester).
Ftp-клиент
FTP – это протокол передачи файлов. Через него файлы можно скопировать с компьютера на сервер и обратно, отредактировать.
Для использования FTP необходима специальная программа. Их существует большое количество, некоторые из них бесплатные, другие могут быть коммерческими. Практически все программы FTP работают таким образом: появляются 2 окна, где 1-е – ваши файлы на сервере в интернете, а 2-е –  файлы на компьютере. Тем самым можно легко передавать файлы на компьютер/сервер.
Предположим, программа FTP уже выбрана и установлена на компьютер, но для работы необходимо знать FTP-адрес вашего веб-сервера, имя пользователя и пароль. Это важная информация, ее можно получить на хостинге и нужно обязательно записать. Если все данные есть, можно попробовать получить доступ к файлам FTP.
В различных программах действия могут различаться, но в любом случае нужно создать новое соединение с именем пользователя и паролем, что позволит сохранить настройки, тем самым исключая необходимость ввода данных каждый раз при входе в программу.
После создания профиля и ввода всех данных нажмите «Соединиться», после чего программа начнет соединяться с сервером. Если все настройки верны, через несколько секунд (в зависимости от скорости интернета) можно будет увидеть все свои файлы, находящиеся на сайте.
На веб-сервере находится набор папок и файлов. Подключаясь к серверу, программа отправляет запрос через интернет на специальный сервер и получает данные. Существуют протоколы и с более расширенным функционалом, нежели обычный веб-серфинг.
Используемая FTP-программа дает возможность создавать, редактировать и удалять файлы и папки на веб-сервере, а также передавать эти файлы на сервер и обратно.
Плагины
Есть несколько способов открыть:
* Control + SHIFT + I – открывает панель элементов.
* Control + SHIFT + J или F12 – открывает консоль.
* Control + SHIFT + C – позволяет выбрать элемент с помощью мыши в самом документе и открыть его во вкладке «Elements».
* Можно нажать на любой элемент на странице правой кнопкой мыши и выбрать «Inspect Element (Просмотр кода элемента)».
* Можно открыть Web Inspector из меню: Иконка с ключом -> Инструменты -> Инструменты разработчика (Tools -> Developer tools).
Чтобы посмотреть список горячих клавиш, откройте любую вкладку, кроме консоли, и нажмите там «?».
При помощи просмотра кода элемента можно инспектировать любые сайты, четко определять структуру сайта, вносить изменения в код и многое другое.
Валидатор
Чистый валидный код в HTML и CSS повышает скорость загрузки и шансы, что на всех без исключения устройствах и браузерах ваша верстка будет выглядеть так, как вы хотите. Поэтому любой верстке нужно проводить валидацию. Валидаторы W3C – два сервиса, которые помогают держать код в чистоте и порядке.
Есть три варианта проверки: проверить код в файле по указанной ссылке, загрузить файл с десктопа или скопировать код прямо в форму на сайте.
HTML-валидатор производит несколько проверок кода:
* Валидация синтаксиса – проверка на наличие синтаксических ошибок.
* Проверка вложенности тегов – они должны быть закрыты в обратном порядке относительно их открытия.
* Валидация DTD – проверка соответствия вашего кода указанному Document Type Definition. Она включает проверку названий тегов, атрибутов и «встраивания» тегов.
* Проверка на посторонние элементы – выявляет все, что есть в коде, но отсутствует в DTD.
Оптимизация изображений
Оптимизация графики – не менее важный аспект верстки, чем чистота кода. Функция «Save for Web» в Photoshop незаменима, но с png она работает крайне плохо. Поэтому после экспорта png-файлов из фотошопа рекомендуется оптимизировать графику в TinyPNG. После обработки файл теряет 30-70% веса, но на качество это никак не влияет.
Генератор CSS-градиентов
CSS-градиенты позволяют сделать фон из двух и более цветов, плавно переходящих из одного в другой. Они применяются уже достаточно давно и неплохо поддерживаются браузерами. Большинство современных браузеров понимает их без префиксов, для IE9 и старше есть Gradient Filter, также для IE9 можно использовать SVG.
Градиенты могут быть использованы везде, где есть картинки: в фонах, в качестве буллетов списков, в content или border-image.
Совместимости разных версий браузеров
Сайт будет отображаться и работать во всех популярных браузерах одинаково, когда отображение параметров страниц при использовании разных браузеров, их версий и модификаций близко к исходному дизайнерскому и функциональному виду сайта. Необходимо пользоваться специальными программами, чтобы сайт выглядел во всех браузерах одинаково. Инструмент, который приходится использовать ради IE, – тестировщик IETester. Он позволяет проверять, как выглядит сайт во всех версиях IE, начиная с 5.5.


Проблема «кроссбраузерности»
В процессе работы любой веб-разработчик сталкивается с таким понятием, как кроссбраузерность. Оно означает, что любой сайт должен выглядеть одинаково во всех браузерах. Главным виновником этой проблемы является Internet Explorer (IE). Рассмотрим пути решения проблемы кроссбраузерности:
1. Необходимо проверять, как выглядит сайт во всех популярных браузерах, с некоторой периодичностью во время верстки. Тогда вы сможете оперативно устранять несоответствия.
2. Некоторые теги HTML, например заголовки, параграфы, списки, изначально имеют определенный набор свойств и значений. Они могут определяться каждым браузером по-разному. Чтобы вид HTML страницы не зависел от того, с помощью какого браузера ее просматривают, используется сброс стилей CSS. Обычно, если используется сброс стилей, их определяют в отдельном файле, который подключают на веб-страницу при помощи тега <link />.
3. Существует возможность воспользоваться хаками. Хак – исправление ошибки или добавление новой функции посредством использования другой недокументированной или некорректно реализованной особенности. Возникает необходимость добавлять хаки в основном для IE, но ими пользоваться не рекомендуется, т.к. это противоречит спецификации CSS. Чтобы исправить несоответствия отображения в IE, лучше воспользоваться следующим пунктом.
4. Объявить условный комментарий. Он представляет собой обычный HTML-комментарий, где в квадратных скобках указывается условие, которое понимает только браузер IE, а все остальные браузеры игнорируют.
Условный комментарий
<!--[if gte IE 6]>
       <link href="css/style_ie.css" rel="stylesheet" type="text/css" /> 
<![endif]-->
	То, что находится между if и endif, IE выполнит. В данном случае подключится файл стилей CSS. В нем можно писать только те стили CSS, которые будут относиться к IE. Для того чтобы точно определять, к каким версиям IE применять стили, можно использовать дополнительные логические операторы:
* lt – версия меньше указанной.
* lte – версия меньше или равна указанной.
* gt – версия больше указанной; 
* gte – версия больше или равна указанной.
При помощи других логических операторов (& – и, | – или, ! – не) выполняется группировка условных комментариев для различных версий IE:
* [if (IE 6) & (IE 7)] – 6-я версия И 7-я версия.
* [if (IE 6) | (IE 7)] – 6-я версия ИЛИ 7-я версия.
* [if !(IE 8)] – НЕ 8-я версия.
Стандарты HTML/CSS
Версии HTML
Стандарт HTML зародился в конце 80-х – начале 90-х годов. Но только в 1995 году был принят стандарт HTML версии 2.0. Затем он активно развивался до 2000 года, остановилось развитие на версии 4.01 Strict. Как раз в это время начал развиваться стандарт XHTML, который основывается на языке представления данных XML и предъявляет к документам более строгие правила оформления. Существуют три версии стандарта XHTML: версии 1.0, 1.1 и 2.0. Но версия 2.0 не достигла статуса рекомендации, и к 2010 деятельность по разработке стандарта XTHML прекращена. Группа разработчиков переведена на разработку стандарта HTML5, которая продолжается в настоящее время.
Версии CSS
CSS версии 1 была принята в 1996 году, а в 1998 году она была расширена версией 2. Рабочий проект CSS версии 2.1 появился в 2006 году, а был принят организацией w3c в 2011 году. В нем были исправлены ошибки версии 2 и изменены некоторые части спецификации. В настоящее время разрабатывается CSS версии 3, которая имеет множество нововведений и дополнений.


Будущее за стандартами HTML5 и CSS3
За один урок невозможно рассказать о нововведениях и преимуществах новых стандартов HTML5 и CSS3, поэтому рассмотрим то, что можно применять уже сегодня. HTML5 и CSS3 уже поддерживаются всеми современными браузерами, включая IE, начиная с 9-й версии. Но существует проблема: 9-ю версию IE можно установить только на ОС Windows Vista или Windows 7. Компания Microsoft отказалась от поддержки Windows XP, но у многих пользователей он еще установлен, и пройдет еще немало времени, пока XP не исчезнет с компьютеров пользователей. Такие пользователи не могут обновить IE дальше 8 версии. Новые теги HTML5 можно включить в документ при помощи JavaScript, а в случае с CSS3 пользователь, просматривающий сайт через IE меньше 9 версии, не увидит эффектов применения стилей CSS3.
При помощи HTML5 можно заменить основные элементы в структуре макета специальными тегами и тем самым более четко представить структуру сайта.
Семантические элементы 
<section> является способом разделения страницы или статьи на тематические разделы. Не используется многократно, обычно содержит заголовок.
<header> образует содержимое верхней части («шапки») страницы или ее секции. Объединяет вводную информацию и навигационные элементы, может располагаться в любой части страницы. В HTML-документе может содержаться одновременно несколько элементов <header>. Не является обязательным.
<footer> формирует содержимое нижней части («подвала») страницы или ее секции. Предназначен для размещения информации о веб-ресурсе, например сведений об авторских правах, ссылок на условия использования, контактной информации, ссылок на связанное содержимое и т.п. В одном веб-документе может быть несколько элементов <footer>.
<aside> группирует содержимое, связанное с окружающим его контентом напрямую, но которое можно счесть отдельным. Чаще всего элемент позиционируется как боковая колонка.
<hgroup> используется для группировки элементов <h1>-<h6> в случае, когда заголовок имеет сложную структуру – например, имеет уточняющие подзаголовки, альтернативные заголовки.
<nav> предназначен для создания блока навигации веб-страницы или всего веб-сайта, при этом не обязательно должен находиться внутри <header>. На странице может быть несколько элементов <nav>.
<article> используется для группировки записей: публикаций, статей. Представляет собой независимый, обособленный блок, предназначенный для многократного использования.
<main> группирует основной контент веб-страницы. Содержимое элемента должно быть уникальным на странице и не должно отображаться где-либо еще на сайте.
<section> является способом разделения страницы или статьи на тематические разделы.
Возможность вставки аудио и видео без использования Flash появилась благодаря новым тегам, добавленным в HTML5.
Сокращенная форма атрибутов в разделе head
* <!DOCTYPE html> 
* <meta charset=”UTF-8″> 
* <script src=”script.js”></script> 
* <link rel=”stylesheet” href=”styles.css”>
Атрибуты формы
Появились богатые возможности по работе с формами,  масса новых типов полей, например e-mail, tel, url. Благодаря этим типам больше не нужно писать код на JavaScript для проверки формы. Теперь с помощью HTML5 форма автоматически проверяется на корректность заполнения, сразу выдавая все сообщения об ошибках пользователю. Причем все это сделано очень красиво и аккуратно, к тому же внешний вид можно будет изменить через CSS. Также появился элемент datalist, позволяющий создать список вариантов, которые пользователь сможет выбрать при наборе текста. Такой функционал часто используется при наборе поискового запроса, когда при вводе первых символов сразу появляются возможные варианты. Никогда еще сложная функциональность не создавалась так легко.
Также упрощена реализация drag and drop. Пример его использования – перетащили мышкой картинку товара в корзину, и он автоматически туда добавился. Раньше это была достаточно сложная задача, теперь же она делается в течение нескольких минут.
Canvas
Позволяет рисовать прямо на веб-странице через JavaScript, генерировать картинки без перезагрузки страницы. Раньше без использования PHP это было невозможно.
Что нам дарит CSS3
Закругленные уголки у блоков задаются при помощи свойства border-radius.
Можно задавать скругления как всем четырем сторонам вместе, так и каждой в отдельности, тогда отсчет у уголков производится от левого верхнего угла и идет по часовой стрелке. Также возможно задать значения скругления через слеш, тогда первое значение будет задавать скругление по горизонтали, а второе – по вертикали. Таким образом из блока можно сделать эллипс.
Тени вокруг блоков и текста
Для блоков:
box-shadow: 2px 3px 4px #ccc; 
	

Для текста:
text-shadow: 2px 3px 4px #ccc;
	 
* 2px – смещение по оси X.
* 3px – смещение по оси Y.
* 4px – радиус размытия.
* #ccc – цвет тени.
Несколько фоновых изображений
Чтобы задать несколько картинок для одного элемента в качестве фонового изображения, их необходимо перечислить через запятую для свойства background:
background:  url(img/HTML5.png) top center no-repeat,
            url(img/css3.png) top right no-repeat;
	

Прозрачность
При помощи свойства opacity можно задавать элементу полупрозрачность. Значение указывается в интервале от 0 до 1, где 0 – элемента не будет видно, но при этом он не исчезнет из потока документа, как в случае со свойством display: none. А при значении 1 элемент будет четко виден:
opacity: 0.1 .... 1;
	

Появилась возможность управлять элементами на странице. Если задать для многострочного поля ввода <textarea> свойство resize, пользователь получает возможность растягивать данное поле. При значении horizontal можно растянуть его по горизонтали, vertical – по вертикали, а при значении both – и по горизонтали, и по вертикали.


Препроцессоры
Что такое препроцессоры
CSS-препроцессоры – это «программистский» подход к CSS. Они позволяют использовать при написании стилей  свойственные языкам программирования приемы и конструкции: переменные, вложенность, наследуемость, циклы, функции и математические операции. Синтаксис препроцессоров похож на обычный CSS. Код, написанный на языке препроцессора, не используется прямо в браузере, а преобразуется в чистый CSS-код с помощью специальных библиотек.
LESS
* Динамический язык стилей.
* Продукт с открытым исходным кодом.
* Может работать на стороне клиента или на стороне сервера под управлением Node.js или Rhino.
Переменные 
Синтаксис переменных: 
@название_переменной: значение_переменной;
	

Создав переменную один раз, можно использовать ее в любом месте кода. 
Например: 
@color_red: #f00;
background-color: @color_red; 
color: @color_red; 
border-color: @color_red;
	

Во всех местах, где указана переменная, LESS заменит строку @color_red на #f00. Теперь, если понадобится изменить цвет, не нужно искать все его объявления в файле, достаточно просто изменить значение переменной в одном месте.
Область видимости переменных:
* Переменные можно объявлять как «снаружи» правил, так и «внутри». В случае «внутреннего» объявления переменная будет доступна только внутри правила, в котором она объявлена.
* Если переменная объявлена и «внутри» правила, и «снаружи», LESS применит «внутреннее» значение.
* Таким образом можно «переопределять» глобальные переменные в локальном контексте.
Важно отметить: вопреки тому, что вы только что прочитали, переменные в LESS больше похожи на константы. Это значит, что они, в отличие от переменных, могут быть определены только один раз.
Операции
Можно использовать операции умножения, деления, сложения и вычитания.
@width: 100px;
.class_1 {
        width: @width;
}
.class_2 {
        width: @width / 3;
}
.class_3 {
        height: 100px + 20px;
}
	Цветовые операции
На практике есть немало случаев, когда мы начинаем с базового цвета и нуждаемся в слегка затемненном или осветленном его варианте.
@color-button: #ccc;
.button {
       width: 150px; 
       height: 75px;
       background:@color-button; 
       border:5px solid @color-button - #222;
}
	Этот код создает кнопку с немного затемненной рамкой. Это частая ситуация и определение лишь одного цвета – большая помощь.
Есть гораздо больше возможностей для работы с цветами. LESS позволяет манипулировать ими на канальном уровне:
* Осветлять – lighten.
* Затемнять – darken. 
* Насыщать – saturate. 
* Обесцвечивать – desaturate. 
* Вращать цвета – spin.
Примеси (mixins)
Примеси в LESS избавят вас от набора излишнего кода. Вам когда-нибудь приходилось создавать закругленную рамку, в которой только верхние углы скруглены?
________________


.border_top {
           -webkit-border-top-left-radius: 6px; 
           -webkit-border-top-right-radius: 6px; 
           -moz-border-radius-topleft: 6px; 
           -moz-border-radius-topright: 6px; 
            border-top-left-radius: 6px; 
            border-top-right-radius: 6px;
}
.block {
background: #333;
.border_top;
}
	Благодаря такому синтаксису мы можем использовать любой элемент в качестве примеси.
Заключение
Препроцессоры – очень удобное изобретение для всех разработчиков. Это сокращение кода, возможность создания большого функционала сайтов на простом CSS.
Использовать препроцессоры стало намного проще, чем раньше. Для этого нужно лишь установить программу, которая будет следить за файлами, предназначенными для препроцессора, и при их изменении будет компилировать содержимое этих файлов в чистый CSS-код. Для более продвинутых пользователей есть специальные сборщики проектов, которые предлагают полный контроль и расширенные настройки.
Разумеется, как и в любой другой области, на рынке препроцессоров есть конкуренция. Они очень похожи, имеют минимальные отличия. Какой лучше выбрать, какой синтаксис лучше подходит – выбирать вам!
________________
Практика
Применение препроцессора LESS
<header></header>
<main></main>
<footer>
   <div class="block_1"></div>
   <div class="block_2"></div>
   <div class="block_3"></div>
</footer>
	@width: 1400px;
@height: 300px;
* {
 margin:0;
 padding:0;
}
header {
 width:@width;
 height:200px;
 background-color: bisque;
 margin:0 auto;
}
main {
 width:@width;
 height:@height * 2;
 background-color: cadetblue;
 margin:0 auto;
}
footer {
 width:@width;
 height:@height;
 background-color: blueviolet;
 margin:0 auto;
 .block_1, .block_2, .block_3 {
   width:@width / 3;
   float: left;
   height:@height;
 }
 .block_1 {
   background-color: aqua;
 }
 .block_2 {
   background-color: #3074ff;
 }
 .block_3 {
   background-color: #42ffba;
 }
}
	

________________
Практическое задание 
Финальный проект
1. Установить все перечисленные инструменты к себе на компьютер.
2. При помощи валидатора проверить свой сайт на ошибки.
3. Переделать структуру вашего сайта под HTML 5 при помощи новых тегов.
4. Добавить в форму регистрации новые типы полей и атрибутов HTML 5.
5. Добавить на сайт некоторые эффекты CSS 3.
6. Закачать проект на хостинг.
7. Выслать ссылку на ваш сайт в Интернете.
8. * Переделать стили с использованием препроцессорного языка.
Пожалуйста, пройдите короткий опрос, чтобы оценить время выполнения домашнего задания: https://forms.gle/cBoYMPvbABa36jb7A


Дополнительные материалы
Немного о кроссбраузерности.
Кроссбраузерность веб-сайта.
Новые атрибуты html5.
Использование html5.
HTML5 для начинающих.
Примеры CSS3.
Новое в CSS3.
СSS Препроцессоры.
Начинаем писать CSS.


Используемая литература
Для подготовки данного методического пособия были использованы следующие ресурсы:
1. https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%BE%D1%81%D1%81%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%BD%D0%BE%D1%81%D1%82%D1%8C.
2. http://htmlbook.ru/html5.
3. https://ru.wikipedia.org/wiki/CSS#.D0.A3.D1.80.D0.BE.D0.B2.D0.B5.D0.BD.D1.8C_3_.28CSS3.29.
4. http://htmlbook.ru/css3.
5. http://html5book.ru/html5-semantic-elements/.
6. https://mrmlnc.gitbooks.io/less-guidebook-for-beginners/content/chapter_1/css-reprocessors.html.
7. http://cmsart.ru/joomla/joomla-articles/joomla-1-7/chto-takoe-ftp-i-dlya-chego-on-nuzhen.




© geekbrains.ru